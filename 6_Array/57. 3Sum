Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Example

For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:

(-1, 0, 1)
(-1, -1, 2)

Notice

Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)

The solution set must not contain duplicate triplets.

class Solution {
public:
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int>> threeSum(vector<int> &nums) {
              vector<vector<int>> result;
        if (nums.size() < 3) return result;
        sort(nums.begin(), nums.end());      
        
        for (auto a = nums.begin(); a < (nums.end() - 2); 
             a = upper_bound(nums.begin(), nums.end() -2, *a))
        {
            for(auto b = next(a); b <  (nums.end() - 1); 
                b = upper_bound(next(a), nums.end() - 1, *b))
            {
                int c = 0 - *a - *b;
                if (binary_search(next(b), nums.end(), c))
                result.push_back(vector<int> {*a, *b, c} );
            }
        }     
        return result;
    }
};
